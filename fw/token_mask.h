/**
 *		Tempesta FW
 *
 * Macro to convert token tables into actual mask values
 *
 * Copyright (C) 2016-2023 Tempesta Technologies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59
 * Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

#define __HX(_0, _1, _2, _3) __HX ## _0 ## _1 ## _2 ## _3
#define __BYTE(_0, _1, _2, _3, _4, _5, _6, _7) \
	__PASTE2(__HX(_7, _6, _5, _4), __HX(_3, _2, _1, _0))
#define __XBYTE(_0, _1, _2, _3, _4, _5, _6, _7) \
	__PASTE2(0x, __BYTE(_0, _1, _2, _3, _4, _5, _6, _7))

#define __REP2(...) __VA_ARGS__, __VA_ARGS__
#define __CALC_TOKEN_MASK(TBL) .byte __REP2(__TOKEN_MASK(TBL))

/* Everything below is auto-generated by the following python3 script */
#if 0
#! /usr/bin/env python3

safe_checks = True

def arg(n):
    return f'_{n:02x}'

def args(n):
    return ','.join(arg(x) for x in range(n))

def args_split(n, indent, split=16):
    lines = []
    for i in range(0, n, split):
        lines.append(','.join(arg(j) for j in range(i, min(i + split, n))))
    return indent + f', \\\n{indent}'.join(lines)

def paste_n(n):
    args = ','.join(f'_{i}' for i in range(n))
    val = '##'.join(f'_{i}' for i in range(n))
    return f'#define __PPASTE{n}({args}) {val}\n#define __PASTE{n}({args}) __PPASTE{n}({args})'

def qbytes(n):
    return ','.join('__XBYTE(%s)' % ','.join(arg(i + k) for k in range(0, 128, 16)) for i in range(n, n + 8))

def bin2hex():
    print('/* Hex digits helpers */')
    for i in range(16):
        print(f'#define __HX{i:04b} {i:x}')

def paste(*args):
    print('/* Identifier pasting helpers */')
    for n in args:
        print(paste_n(n))

bin2hex()
paste(2, 9)
if safe_checks:
    print('/* Special symbol to catch non-zero upper ASCII */')
    print('#define __UPPER_ZEROES_' + '0' * 128)

print('\n/* Calculate token masks as bytes */')
print(f'#define __TOKEN_MASK( \\\n{args_split(256, "		", 8)}) \\')
if safe_checks:
    print('\t__UPPER_ZEROES_ \\')
    for k in range(128, 256, 8):
        print('\t\t##%s \\' % '##'.join(arg(i) for i in range(k, k + 8)))
print('\t' + ', \\\n\t'.join(
    '__XBYTE(%s)' % ','.join(arg(i + k) for k in range(0, 128, 16)) for i in range(16)))
#endif

/* Hex digits helpers */
#define __HX0000 0
#define __HX0001 1
#define __HX0010 2
#define __HX0011 3
#define __HX0100 4
#define __HX0101 5
#define __HX0110 6
#define __HX0111 7
#define __HX1000 8
#define __HX1001 9
#define __HX1010 a
#define __HX1011 b
#define __HX1100 c
#define __HX1101 d
#define __HX1110 e
#define __HX1111 f
/* Identifier pasting helpers */
#define __PPASTE2(_0,_1) _0##_1
#define __PASTE2(_0,_1) __PPASTE2(_0,_1)
#define __PPASTE9(_0,_1,_2,_3,_4,_5,_6,_7,_8) _0##_1##_2##_3##_4##_5##_6##_7##_8
#define __PASTE9(_0,_1,_2,_3,_4,_5,_6,_7,_8) __PPASTE9(_0,_1,_2,_3,_4,_5,_6,_7,_8)
/* Special symbol to catch non-zero upper ASCII */
#define __UPPER_ZEROES_00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

/* Calculate token masks as bytes */
#define __TOKEN_MASK( \
		_00,_01,_02,_03,_04,_05,_06,_07, \
		_08,_09,_0a,_0b,_0c,_0d,_0e,_0f, \
		_10,_11,_12,_13,_14,_15,_16,_17, \
		_18,_19,_1a,_1b,_1c,_1d,_1e,_1f, \
		_20,_21,_22,_23,_24,_25,_26,_27, \
		_28,_29,_2a,_2b,_2c,_2d,_2e,_2f, \
		_30,_31,_32,_33,_34,_35,_36,_37, \
		_38,_39,_3a,_3b,_3c,_3d,_3e,_3f, \
		_40,_41,_42,_43,_44,_45,_46,_47, \
		_48,_49,_4a,_4b,_4c,_4d,_4e,_4f, \
		_50,_51,_52,_53,_54,_55,_56,_57, \
		_58,_59,_5a,_5b,_5c,_5d,_5e,_5f, \
		_60,_61,_62,_63,_64,_65,_66,_67, \
		_68,_69,_6a,_6b,_6c,_6d,_6e,_6f, \
		_70,_71,_72,_73,_74,_75,_76,_77, \
		_78,_79,_7a,_7b,_7c,_7d,_7e,_7f, \
		_80,_81,_82,_83,_84,_85,_86,_87, \
		_88,_89,_8a,_8b,_8c,_8d,_8e,_8f, \
		_90,_91,_92,_93,_94,_95,_96,_97, \
		_98,_99,_9a,_9b,_9c,_9d,_9e,_9f, \
		_a0,_a1,_a2,_a3,_a4,_a5,_a6,_a7, \
		_a8,_a9,_aa,_ab,_ac,_ad,_ae,_af, \
		_b0,_b1,_b2,_b3,_b4,_b5,_b6,_b7, \
		_b8,_b9,_ba,_bb,_bc,_bd,_be,_bf, \
		_c0,_c1,_c2,_c3,_c4,_c5,_c6,_c7, \
		_c8,_c9,_ca,_cb,_cc,_cd,_ce,_cf, \
		_d0,_d1,_d2,_d3,_d4,_d5,_d6,_d7, \
		_d8,_d9,_da,_db,_dc,_dd,_de,_df, \
		_e0,_e1,_e2,_e3,_e4,_e5,_e6,_e7, \
		_e8,_e9,_ea,_eb,_ec,_ed,_ee,_ef, \
		_f0,_f1,_f2,_f3,_f4,_f5,_f6,_f7, \
		_f8,_f9,_fa,_fb,_fc,_fd,_fe,_ff) \
	__UPPER_ZEROES_ \
		##_80##_81##_82##_83##_84##_85##_86##_87 \
		##_88##_89##_8a##_8b##_8c##_8d##_8e##_8f \
		##_90##_91##_92##_93##_94##_95##_96##_97 \
		##_98##_99##_9a##_9b##_9c##_9d##_9e##_9f \
		##_a0##_a1##_a2##_a3##_a4##_a5##_a6##_a7 \
		##_a8##_a9##_aa##_ab##_ac##_ad##_ae##_af \
		##_b0##_b1##_b2##_b3##_b4##_b5##_b6##_b7 \
		##_b8##_b9##_ba##_bb##_bc##_bd##_be##_bf \
		##_c0##_c1##_c2##_c3##_c4##_c5##_c6##_c7 \
		##_c8##_c9##_ca##_cb##_cc##_cd##_ce##_cf \
		##_d0##_d1##_d2##_d3##_d4##_d5##_d6##_d7 \
		##_d8##_d9##_da##_db##_dc##_dd##_de##_df \
		##_e0##_e1##_e2##_e3##_e4##_e5##_e6##_e7 \
		##_e8##_e9##_ea##_eb##_ec##_ed##_ee##_ef \
		##_f0##_f1##_f2##_f3##_f4##_f5##_f6##_f7 \
		##_f8##_f9##_fa##_fb##_fc##_fd##_fe##_ff \
	__XBYTE(_00,_10,_20,_30,_40,_50,_60,_70), \
	__XBYTE(_01,_11,_21,_31,_41,_51,_61,_71), \
	__XBYTE(_02,_12,_22,_32,_42,_52,_62,_72), \
	__XBYTE(_03,_13,_23,_33,_43,_53,_63,_73), \
	__XBYTE(_04,_14,_24,_34,_44,_54,_64,_74), \
	__XBYTE(_05,_15,_25,_35,_45,_55,_65,_75), \
	__XBYTE(_06,_16,_26,_36,_46,_56,_66,_76), \
	__XBYTE(_07,_17,_27,_37,_47,_57,_67,_77), \
	__XBYTE(_08,_18,_28,_38,_48,_58,_68,_78), \
	__XBYTE(_09,_19,_29,_39,_49,_59,_69,_79), \
	__XBYTE(_0a,_1a,_2a,_3a,_4a,_5a,_6a,_7a), \
	__XBYTE(_0b,_1b,_2b,_3b,_4b,_5b,_6b,_7b), \
	__XBYTE(_0c,_1c,_2c,_3c,_4c,_5c,_6c,_7c), \
	__XBYTE(_0d,_1d,_2d,_3d,_4d,_5d,_6d,_7d), \
	__XBYTE(_0e,_1e,_2e,_3e,_4e,_5e,_6e,_7e), \
	__XBYTE(_0f,_1f,_2f,_3f,_4f,_5f,_6f,_7f)
